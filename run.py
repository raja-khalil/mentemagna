import os
from flask import Flask

# Tentar importar dotenv, mas funcionar mesmo sem ele
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è python-dotenv n√£o encontrado, usando configura√ß√µes padr√£o")

from extensions import db, migrate, mail, login_manager
from routes.main import main_bp
from routes.blog import blog_bp
from routes.auth import auth_bp
from routes.sitemap import sitemap_bp

# NOVA IMPORTA√á√ÉO: Sistema de solu√ß√µes
try:
    from routes.solutions import solutions_bp
    SOLUTIONS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Sistema de solu√ß√µes n√£o encontrado. Execute: python run_setup.py")
    SOLUTIONS_AVAILABLE = False

from admin.routes import admin_bp
from config import config


def create_app():
    # Instancia a aplica√ß√£o Flask (configura√ß√µes em instance/)
    app = Flask(__name__, instance_relative_config=True)
    os.makedirs(app.instance_path, exist_ok=True)

    # Seleciona configura√ß√£o conforme FLASK_ENV (development, production ou default)
    env = os.getenv('FLASK_ENV', 'development')
    app.config.from_object(config.get(env, config['development']))

    # Inicializa extens√µes
    db.init_app(app)
    migrate.init_app(app, db)
    mail.init_app(app)
    login_manager.init_app(app)

    # Registra blueprints: autentica√ß√£o, painel admin, blog, sitemap e rotas p√∫blicas
    app.register_blueprint(auth_bp, url_prefix='/auth')
    app.register_blueprint(admin_bp, url_prefix='/admin')
    app.register_blueprint(blog_bp, url_prefix='/blog')
    app.register_blueprint(sitemap_bp)  # Sem prefixo para sitemap.xml na raiz
    
    # NOVO: Registrar blueprint de solu√ß√µes
    if SOLUTIONS_AVAILABLE:
        app.register_blueprint(solutions_bp)
        print("‚úÖ Sistema de solu√ß√µes carregado!")
    
    app.register_blueprint(main_bp)

    return app


# Cria inst√¢ncia da aplica√ß√£o
app = create_app()

if __name__ == '__main__':
    # Garante cria√ß√£o das tabelas se n√£o existirem
    with app.app_context():
        db.create_all()
        print('[‚úÖ] Banco criado/verificado em', app.config['SQLALCHEMY_DATABASE_URI'])
        
        # Criar usu√°rio admin padr√£o se n√£o existir
        from models import User
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            admin = User(username='admin')
            admin.set_password('123456')  # Senha tempor√°ria
            db.session.add(admin)
            db.session.commit()
            print('[‚úÖ] Usu√°rio admin criado - Login: admin / Senha: 123456')
        else:
            print('[‚ÑπÔ∏è] Usu√°rio admin j√° existe')
        
        # Criar categorias padr√£o se sistema de solu√ß√µes estiver dispon√≠vel
        if SOLUTIONS_AVAILABLE:
            try:
                from models import Category
                categories_count = Category.query.count()
                if categories_count == 0:
                    # Criar categorias b√°sicas
                    default_categories = [
                        {'name': 'Intelig√™ncia Artificial', 'icon': 'ü§ñ', 'color': '#e74c3c'},
                        {'name': 'Programa√ß√£o', 'icon': 'üíª', 'color': '#3498db'},
                        {'name': 'Web Development', 'icon': 'üåê', 'color': '#2ecc71'},
                        {'name': 'Ferramentas', 'icon': 'üîß', 'color': '#f39c12'},
                    ]
                    
                    for cat_data in default_categories:
                        category = Category(**cat_data)
                        db.session.add(category)
                    
                    db.session.commit()
                    print('[‚úÖ] Categorias padr√£o criadas')
                
            except Exception as e:
                print(f'[‚ö†Ô∏è] Erro ao criar categorias: {e}')
    
    # URLs importantes do sistema
    print('\nüöÄ MENTEMAGNA FUNCIONANDO!')
    print('üì± Site: http://localhost:5000')
    print('üîê Admin: http://localhost:5000/auth/login')
    print('üë§ Login: admin / Senha: 123456')
    print('üìù Blog: http://localhost:5000/blog')
    
    if SOLUTIONS_AVAILABLE:
        print('üîß Solu√ß√µes: http://localhost:5000/solucoes')
        print('üè• CID: http://localhost:5000/solucoes/consulta-cid')
        print('üëî CBO: http://localhost:5000/solucoes/consulta-cbo')
    
    print('üó∫Ô∏è Sitemap: http://localhost:5000/sitemap.xml')
    print('ü§ñ Robots: http://localhost:5000/robots.txt')
    print('\nPressione Ctrl+C para parar')
    
    app.run(debug=app.config.get('DEBUG', True))